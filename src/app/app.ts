import { createResponseCard } from './card';
import { CardFactory, MemoryStorage, MessageFactory, TurnContext, BotFrameworkAdapter } from "botbuilder";
import * as path from "path";
import config from "../config";
import fs from 'fs';
import * as restify from "restify";

// See https://aka.ms/teams-ai-library to learn more about the Teams AI library.
import { Application, ActionPlanner, OpenAIModel, PromptManager, AI, PredictedSayCommand } from "@microsoft/teams-ai";

// Create AI components
const model = new OpenAIModel({
  azureApiKey: config.azureOpenAIKey,
  azureDefaultDeployment: config.azureOpenAIDeploymentName,
  azureEndpoint: config.azureOpenAIEndpoint,
  azureApiVersion: "2024-02-15-preview",

  useSystemMessages: true,
  logRequests: true,
});
const prompts = new PromptManager({
  promptsFolder: path.join(__dirname, "../prompts"),
});
const planner = new ActionPlanner({
  model,
  prompts,
  defaultPrompt: async () => {
    try {
      const template = await prompts.getPrompt('chat');
      const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));

      // Ensure the Azure Search endpoint is properly configured
      const dataSources = (template.config.completion as any)['data_sources'];

      dataSources.forEach((dataSource: any) => {
        if (dataSource.type === 'azure_search') {
          dataSource.parameters.authentication.key = 'KdwXUJBnkvPgIyldMnOZ83pqV6utE96lY2x1CewrTFAzSeBOSJT5';
          dataSource.parameters.endpoint = 'https://rivetingsearch.search.windows.net';
          dataSource.parameters.indexName = config.indexName;
          dataSource.parameters.embedding_dependency.deployment_name = 'text-embedding';
          dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;
        }
      });

      return template;
    } catch (error) {
      console.error("Error in defaultPrompt:", error.message);
      throw new Error("Failed to generate default prompt. Please check your configuration and API parameters.");
    }
  },
});

// Define storage and application
const storage = new MemoryStorage();
const app = new Application({
  storage,
  ai: {
    planner,
    // feedback loop is enabled
    enable_feedback_loop: true,
  },
});

// Add feedback loop handling logic
app.feedbackLoop(async (_context, _state, feedbackLoopData) => {
  if (feedbackLoopData.actionValue.reaction === 'like') {
    console.log('üëç' + ' ' + feedbackLoopData.actionValue.feedback!);
  } else {
    console.log('üëé' + ' ' + feedbackLoopData.actionValue.feedback!);
  }
});

// Add PredictedSayCommand action to customize the citation
app.ai.action<PredictedSayCommand>(AI.SayCommandActionName, async (context, state, data, action) => {
  let activity;
  if (data.response.context && data.response.context.citations.length > 0) {
      const attachment = CardFactory.adaptiveCard(createResponseCard(data.response));
      activity = MessageFactory.attachment(attachment);
  } else {
      activity = MessageFactory.text(data.response.content);
  }

  // Add the "Generated by AI" label to activity.entities
  activity.entities = [
    {
        type: "https://schema.org/Message",
        "@type": "Message",
        "@context": "https://schema.org",
        "@id": "",
        // Generated by AI label
        additionalType: ["AIGeneratedContent"],
    },
  ];
  activity.channelData = {
    feedbackLoopEnabled: true
  };

  await context.sendActivity(activity);

  return "success";
});

// Create a local server
const server = restify.createServer();
server.use(restify.plugins.bodyParser());

// Initialize BotFrameworkAdapter
const adapter = new BotFrameworkAdapter({
  appId: process.env.MicrosoftAppId,
  appPassword: process.env.MicrosoftAppPassword,
});

// Define the endpoint for Teams messages
server.post("/api/messages", async (req, res) => {
  await adapter.processActivity(req, res, async (context) => {
    await app.run(context);
  });
});

// Start the server
const PORT = process.env.port || 3978;
const NGROK_URL = process.env.NGROK_URL || `http://localhost:${PORT}`;

server.listen(PORT, () => {
  console.log(`Bot is running locally on ${NGROK_URL}`);
  console.log("Use a tunneling service like ngrok to expose this endpoint for Teams.");

  // Log ngrok instructions
  console.log("If ngrok is running, use the following command to expose your bot:");
  console.log("ngrok http 3978");
  console.log("Once ngrok is running, update your bot's messaging endpoint with the ngrok URL.");
});

export default app;
